#include <string>

/*														ДЕШИФР ЦЕЗАРЯ
*
Смещает букву на k , где k это ключ шифрования, на который происходит смещение
Если ключ равен 3 , то происходит следующее , ABC заменяется на DEF
	  A B C
	  | | |
A B C D E F
функия принимает строку , запрашивает ключ и выводит зашифрованную строку
ключ может лежать в диапазоне от 1 до 25 , так как всего 26 букв в латинском алфавите
*/

/// <summary>
/// Функция которая расшифровывает строку зашифрованную шифром цезаря по ключу
/// </summary>
/// <param name="key"> ключ для дешифровки </param>
/// <param name="message"> зашифрованное сообщение </param>
/// <returns> Расшифрованное сообшение </returns>
std::string CaesarDecoder(int key, std::string message);

/// <summary>
/// Функция осуществляющая взаимолействия с пользователем
/// </summary>
void DeCaesar();




/*														ДЕШИФР ВЕРНАМА
* XOR-шифр , который работает со случайно сгенерированным ключом из нужного диапазона
*/
/// <summary>
/// Функция осуществляющая взаимолействия с пользователем
/// </summary>
void DeVernam();

/// <summary>
/// Функция которая расшифровывает строку зашифрованную шифром Вернама по ключу
/// </summary>
/// <param name="key"> ключ для дешифровки </param>
/// <param name="message"> зашифрованное сообщение </param>
/// <returns> Расшифрованное сообшение </returns>
std::string VernamDecode(std::string message, std::string key);


/*													ДЕШИФР ВИЖЕНЕРА
* данный алгоритм реализован через часть ASCII-кода. Взял диапазон от 32 до 125, за этот диапазон выйти не получится,
все данные шифруются char'ами из этого диапазона. Ключом является слово и происходит сдвиг, подобный шифру Цезаря, только более
надёжный, так как слово может состоять из нескольких char'ов , а не из одного
*/
/// <summary>
/// Функция которая расшифровывает строку зашифрованную шифром Виженера по ключу
/// </summary>
/// <param name="key"> ключ для дешифровки </param>
/// <param name="message"> зашифрованное сообщение </param>
/// <returns> Расшифрованное сообшение </returns>
std::string VizhnerDecode(std::string message, std::string key);

/// <summary>
/// Функция осуществляющая взаимолействия с пользователем
/// </summary>
void DeVizhener();